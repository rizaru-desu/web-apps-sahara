// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
model User {
  id            String          @id @default(cuid())
  name          String?         @db.VarChar(255)
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         Bytes?        
  password      String?
  phone         String?        @db.VarChar(50)
  dateOfBirth   String?        @db.VarChar(50)
  leader        String?         @db.VarChar(255)
  inActive      Boolean        @default(false)
  inMobile      Boolean        @default(false)
  accounts      Account[]
  sessions      Session[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @default("bySystem") @db.VarChar(255)
  updatedBy String   @default("bySystem") @db.VarChar(255)

  role Role[]
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
  
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

// Creeate Role
model Role {
  id      String   @default(cuid())
  userId  String 
  name    String  @unique
  user    User   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @default("bySystem") @db.VarChar(255)
  updatedBy String   @default("bySystem") @db.VarChar(255)
}

// Create StringMap
model StringMap {
  id            String   @id @default(cuid())
  name          String 
  objectName    String
  key           Int
 
  createdBy String   @default("bySystem") @db.VarChar(255)
  updatedBy String   @default("bySystem") @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Product
model Product {
  productId     String        @id @default(cuid())
  productName   String        @db.VarChar(255)
  weight        Decimal
  unit          String        @db.VarChar(255)
  productCode   String        @unique() @db.VarChar(255)
  expiredPeriod DateTime
  campaignId    String?       @db.VarChar(255)
  basePoint     Int
  createdBy     String            @default("bySystem") @db.VarChar(255)
  updatedBy     String            @default("bySystem") @db.VarChar(255)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  campaign      Campaign?     @relation(fields: [campaignId], references: [campaignId], onDelete: SetNull)

   @@index([campaignId])
}

model Campaign {
  campaignId   String    @id @default(cuid())
  campaignName String    @db.VarChar(255)
  startDate    DateTime
  endDate      DateTime
  loyaltyPoint Int
  photo        Bytes
  description  String    @db.VarChar(255)
  inActive     Boolean   @default(false)
  createdBy String            @default("bySystem") @db.VarChar(255)
  updatedBy String            @default("bySystem") @db.VarChar(255)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  product      Product[]

  @@index([campaignId])
}

model Agent {
  agentId       String     @id @default(cuid())
  storeAddress  String     @db.VarChar(1000)
  customerName  String     @unique(map: "customerName") @db.VarChar(255)
  email         String     @db.VarChar(255)
  noNpwp        String?    @db.VarChar(50)
  phone         String     @db.VarChar(255)
  picName       String     @db.VarChar(255)
  picPhone      String     @db.VarChar(255)
  createdBy     String            @default("bySystem") @db.VarChar(255)
  updatedBy     String            @default("bySystem") @db.VarChar(255)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([agentId])
}